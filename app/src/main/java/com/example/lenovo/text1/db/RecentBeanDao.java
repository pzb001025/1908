package com.example.lenovo.text1.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lenovo.text1.bean.RecentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENT_BEAN".
*/
public class RecentBeanDao extends AbstractDao<RecentBean, String> {

    public static final String TABLENAME = "RECENT_BEAN";

    /**
     * Properties of entity RecentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property News_id = new Property(0, int.class, "news_id", false, "NEWS_ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Thumbnail = new Property(2, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Title = new Property(3, String.class, "title", true, "TITLE");
    }


    public RecentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_BEAN\" (" + //
                "\"NEWS_ID\" INTEGER NOT NULL ," + // 0: news_id
                "\"URL\" TEXT," + // 1: url
                "\"THUMBNAIL\" TEXT," + // 2: thumbnail
                "\"TITLE\" TEXT PRIMARY KEY NOT NULL );"); // 3: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getNews_id());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(3, thumbnail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getNews_id());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(3, thumbnail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public RecentBean readEntity(Cursor cursor, int offset) {
        RecentBean entity = new RecentBean( //
            cursor.getInt(offset + 0), // news_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // thumbnail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentBean entity, int offset) {
        entity.setNews_id(cursor.getInt(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setThumbnail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecentBean entity, long rowId) {
        return entity.getTitle();
    }
    
    @Override
    public String getKey(RecentBean entity) {
        if(entity != null) {
            return entity.getTitle();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentBean entity) {
        return entity.getTitle() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
